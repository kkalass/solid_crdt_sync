@prefix crdt: <https://kkalass.github.io/solid_crdt_sync/vocab/crdt-mechanics#> .
@prefix algo: <https://kkalass.github.io/solid_crdt_sync/vocab/crdt-algorithms#> .
@prefix sync: <https://kkalass.github.io/solid_crdt_sync/vocab/sync#> .
@prefix mc: <https://kkalass.github.io/solid_crdt_sync/vocab/merge-contract#> .
@prefix idx: <https://kkalass.github.io/solid_crdt_sync/vocab/idx#> .
@prefix mappings: <https://kkalass.github.io/solid_crdt_sync/mappings/> .

# CRDT mappings for index documents (FullIndex, GroupIndexTemplate, GroupIndex)
# Used by framework for index metadata synchronization

<> a mc:DocumentMapping;
   # Import base CRDT framework
   mc:imports ( mappings:core-v1 ) ;
   # Define index-specific class mappings
   mc:classMapping ( <#full-index> <#group-index-template> <#group-index> <#indexed-property> <#grouping-rule> <#grouping-rule-property> <#modulo-hash-sharding> ) .

# FullIndex documents
<#full-index> a mc:ClassMapping;
   mc:appliesToClass idx:FullIndex;
   mc:rule
     [ mc:predicate idx:indexesClass; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:indexedProperty; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:hasShard; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:shardingAlgorithm; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:readBy; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:deprecatedAt; algo:mergeWith algo:LWW_Register ] .

# GroupIndexTemplate documents
<#group-index-template> a mc:ClassMapping;
   mc:appliesToClass idx:GroupIndexTemplate;
   mc:rule
     [ mc:predicate idx:indexesClass; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:indexedProperty; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:shardingAlgorithm; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:groupedBy; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:readBy; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:deprecatedAt; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate idx:populationState; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate idx:hasPopulatingShard; algo:mergeWith algo:OR_Set ] .

# GroupIndex documents
<#group-index> a mc:ClassMapping;
   mc:appliesToClass idx:GroupIndex;
   mc:rule
     [ mc:predicate idx:basedOn; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:readBy; algo:mergeWith algo:OR_Set ],
     [ mc:predicate idx:populationState; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate idx:deprecatedAt; algo:mergeWith algo:LWW_Register ] .

# IndexedProperty configuration objects within indices
<#indexed-property> a mc:ClassMapping;
   mc:appliesToClass idx:IndexedProperty;
   mc:rule
     [ mc:predicate idx:trackedProperty; algo:mergeWith algo:Immutable ],  # Which property to index
     [ mc:predicate idx:readBy; algo:mergeWith algo:OR_Set ] .      # Which installations read this property

# GroupingRule configuration for partitioned indices
<#grouping-rule> a mc:ClassMapping;
   mc:appliesToClass idx:GroupingRule;
   mc:rule
     [ mc:predicate idx:property; algo:mergeWith algo:OR_Set ],           # GroupingRuleProperty instances
     [ mc:predicate idx:groupTemplate; algo:mergeWith algo:Immutable ] .  # Template for group IRI construction

# GroupingRuleProperty configuration within grouping rules
<#grouping-rule-property> a mc:ClassMapping;
   mc:appliesToClass idx:GroupingRuleProperty;
   mc:rule
     [ mc:predicate idx:sourceProperty; algo:mergeWith algo:Immutable ],  # Source property to extract from
     [ mc:predicate idx:name; algo:mergeWith algo:Immutable ],            # Variable name for template
     [ mc:predicate idx:format; algo:mergeWith algo:LWW_Register ],       # Optional format string
     [ mc:predicate idx:missingValue; algo:mergeWith algo:LWW_Register ] . # Default value for missing properties

# ModuloHashSharding algorithm configuration
<#modulo-hash-sharding> a mc:ClassMapping;
   mc:appliesToClass idx:ModuloHashSharding;
   mc:rule
     [ mc:predicate idx:hashAlgorithm; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:numberOfShards; algo:mergeWith algo:Immutable ],
     [ mc:predicate idx:configVersion; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate idx:autoScaleThreshold; algo:mergeWith algo:LWW_Register ] .