@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix crdt: <https://kkalass.github.io/solid_crdt_sync/vocab/crdt#> .
@prefix sync: <https://kkalass.github.io/solid_crdt_sync/vocab/sync#> .
@prefix solid: <http://www.w3.org/ns/solid/terms#> .

# --- Ontology Definition ---

<https://kkalass.github.io/solid_crdt_sync/vocab/crdt> a owl:Ontology;
    rdfs:label "CRDT Mechanics Vocabulary";
    rdfs:comment "A vocabulary to describe the low-level, generic mechanics and data structures required for state-based CRDTs on RDF data." .

# --- Class Definitions ---

crdt:Algorithm a rdfs:Class;
    rdfs:label "CRDT Algorithm";
    rdfs:comment "An abstract base class for a specific CRDT merge algorithm." .

crdt:LWW_Register a rdfs:Class;
    rdfs:label "LWW-Register";
    rdfs:comment "A Last-Writer-Wins Register CRDT, for single-value properties.";
    rdfs:subClassOf crdt:Algorithm .

crdt:OR_Set a rdfs:Class;
    rdfs:label "OR-Set";
    rdfs:comment "An Observed-Remove Set CRDT, for multi-value properties that allows items to be re-added after deletion.";
    rdfs:subClassOf crdt:Algorithm .

crdt:2P_Set a rdfs:Class;
    rdfs:label "2P-Set";
    rdfs:comment "A Two-Phase Set CRDT, for multi-value properties where removal is permanent.";
    rdfs:subClassOf crdt:Algorithm .

crdt:Sequence a rdfs:Class;
    rdfs:label "Sequence";
    rdfs:comment "A Sequence CRDT for maintaining an ordered list of items.";
    rdfs:subClassOf crdt:Algorithm .

crdt:ClockEntry a rdfs:Class;
    rdfs:label "Clock Entry";
    rdfs:comment "A single entry in a Vector Clock, mapping a client ID to its version number." .

# --- Property Definitions ---

crdt:mergeWith a rdf:Property;
    rdfs:label "merge with";
    rdfs:comment "Links a sync:Rule to the specific CRDT Algorithm to be used for merging.";
    rdfs:domain sync:Rule;
    rdfs:range crdt:Algorithm .

crdt:hasClockEntry a rdf:Property;
    rdfs:label "has clock entry";
    rdfs:comment "Links a resource to a blank node representing a single entry in its Vector Clock.";
    rdfs:domain rdfs:Resource;
    rdfs:range crdt:ClockEntry .

crdt:clientId a rdf:Property;
    rdfs:label "client ID";
    rdfs:comment "The unique identifier for a client within a Vector Clock entry.";
    rdfs:domain crdt:ClockEntry;
    rdfs:range rdfs:Resource . # Should be an IRI

crdt:clockValue a rdf:Property;
    rdfs:label "clock value";
    rdfs:comment "The version number (counter) for a client within a Vector Clock entry.";
    rdfs:domain crdt:ClockEntry;
    rdfs:range xsd:integer .

crdt:vectorClockHash a rdf:Property;
    rdfs:label "vector clock hash";
    rdfs:comment "A pre-calculated, lightweight hash of the resource's full vector clock, used for efficient change detection in indices.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:string .

crdt:ClientInstallation a rdfs:Class;
    rdfs:label "Client Installation";
    rdfs:comment "A unique installation of a CRDT-enabled application, providing traceability and identity for vector clock entries across the distributed system." .

crdt:Immutable a rdfs:Class;
    rdfs:label "Immutable";
    rdfs:comment "A CRDT algorithm for properties that must never change after creation. Sync fails if different values are encountered, forcing creation of new resource versions.";
    rdfs:subClassOf crdt:Algorithm .



# --- Property Definitions (continued) ---

crdt:belongsToWebID a rdf:Property;
    rdfs:label "belongs to WebID";
    rdfs:comment "Links a client installation to the WebID that owns it.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range rdfs:Resource .

crdt:applicationId a rdf:Property;
    rdfs:label "application ID";
    rdfs:comment "The unique identifier for the application that created this installation.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range rdfs:Resource .

crdt:createdAt a rdf:Property;
    rdfs:label "created at";
    rdfs:comment "Timestamp when this client installation was first created.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range xsd:dateTime .

crdt:lastActiveAt a rdf:Property;
    rdfs:label "last active at";
    rdfs:comment "Timestamp of the last activity from this installation. Updated collaboratively by other installations to track dormancy.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range xsd:dateTime .


crdt:tombstoneRetentionPeriod a rdf:Property;
    rdfs:label "tombstone retention period";
    rdfs:comment "Duration to retain tombstoned resources before garbage collection. Expressed as ISO 8601 duration (e.g., 'P1Y' for 1 year). Applied to Type Index (for defaults) or Type Index registrations (for per-type overrides).";
    rdfs:domain [ a owl:Class; owl:unionOf (solid:TypeIndex solid:TypeRegistration) ];
    rdfs:range xsd:duration .

crdt:enableAutomaticCleanup a rdf:Property;
    rdfs:label "enable automatic cleanup";
    rdfs:comment "Boolean flag indicating whether the framework should automatically clean up tombstoned resources after the retention period. Applied to Type Index (for defaults) or Type Index registrations (for per-type overrides).";
    rdfs:domain [ a owl:Class; owl:unionOf (solid:TypeIndex solid:TypeRegistration) ];
    rdfs:range xsd:boolean .


crdt:maxInactivityPeriod a rdf:Property;
    rdfs:label "maximum inactivity period";
    rdfs:comment "Duration after which this installation should be considered for tombstoning if no activity is detected. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). If not specified, uses framework default.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range xsd:duration .

crdt:isDeleted a rdf:Property;
    rdfs:label "is deleted";
    rdfs:comment "A boolean property used with RDF Reification to mark individual property values as deleted in set-based CRDTs (OR-Set, 2P-Set). Applied to reified statements (rdf:Statement instances) to create property tombstones.";
    rdfs:domain rdf:Statement;
    rdfs:range xsd:boolean .

crdt:deletedAt a rdf:Property;
    rdfs:label "deleted at";
    rdfs:comment "Timestamp marking when a resource was deleted. Uses OR-Set semantics to support deletion/undeletion cycles for IRI reuse scenarios. Resource is considered deleted if this property has any values. For cleanup, use the latest timestamp plus retention period.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:dateTime .

crdt:TombstonedShard a rdfs:Class;
    rdfs:label "Tombstoned Shard";
    rdfs:comment "A populating shard that has completed its processing and is marked for garbage collection. Used in framework garbage collection indices to track temporary resources that can be safely deleted after a threshold period." .
