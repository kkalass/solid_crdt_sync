// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: lib/models/note_index_entry.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'package:personal_notes_app/models/note_index_entry.dart' as nie;
import 'package:rdf_vocabularies_schema/schema.dart';
import 'package:personal_notes_app/vocabulary/personal_notes_vocab.dart';

/// Generated mapper for [nie.NoteIndexEntry] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `nie.NoteIndexEntry`.
class NoteIndexEntryMapper implements LocalResourceMapper<nie.NoteIndexEntry> {
  /// Constructor
  const NoteIndexEntryMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  nie.NoteIndexEntry fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String title = reader.require(SchemaNoteDigitalDocument.name);
    final DateTime createdAt = reader.require(
      SchemaNoteDigitalDocument.dateCreated,
    );
    final DateTime modifiedAt = reader.require(
      SchemaNoteDigitalDocument.dateModified,
    );
    final Set<String> tags = reader.requireCollection<Set<String>, String>(
      SchemaNoteDigitalDocument.keywords,
      UnorderedItemsSetMapper.new,
    );
    final String? categoryId = reader.optional(
      PersonalNotesVocab.belongsToCategory,
    );

    return nie.NoteIndexEntry(
      title: title,
      createdAt: createdAt,
      modifiedAt: modifiedAt,
      tags: tags,
      categoryId: categoryId,
    );
  }

  @override
  (BlankNodeTerm, Iterable<Triple>) toRdfResource(
    nie.NoteIndexEntry resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaNoteDigitalDocument.name, resource.title)
        .addValue(SchemaNoteDigitalDocument.dateCreated, resource.createdAt)
        .addValue(SchemaNoteDigitalDocument.dateModified, resource.modifiedAt)
        .addCollection<Set<String>, String>(
          SchemaNoteDigitalDocument.keywords,
          resource.tags,
          UnorderedItemsSetMapper.new,
        )
        .when(
          resource.categoryId != null,
          (b) => b.addValue(
            PersonalNotesVocab.belongsToCategory,
            resource.categoryId,
          ),
        )
        .build();
  }
}
