// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: lib/models/note.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'package:personal_notes_app/models/note.dart' as note;
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [note.Note] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `note.Note`.
class NoteMapper implements GlobalResourceMapper<note.Note> {
  /// Constructor
  const NoteMapper();

  @override
  IriTerm? get typeIri => SchemaNoteDigitalDocument.classIri;

  @override
  note.Note fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final id = subject.iri;
    final String title = reader.require(SchemaNoteDigitalDocument.name);
    final String content = reader.require(SchemaNoteDigitalDocument.text);
    final Set<String> tags = reader.requireCollection<Set<String>, String>(
      SchemaNoteDigitalDocument.keywords,
      UnorderedItemsSetMapper.new,
    );
    final DateTime createdAt = reader.require(
      SchemaNoteDigitalDocument.dateCreated,
    );
    final DateTime modifiedAt = reader.require(
      SchemaNoteDigitalDocument.dateModified,
    );

    return note.Note(
      id: id,
      title: title,
      content: content,
      tags: tags,
      createdAt: createdAt,
      modifiedAt: modifiedAt,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    note.Note resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(resource.id);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaNoteDigitalDocument.name, resource.title)
        .addValue(SchemaNoteDigitalDocument.text, resource.content)
        .addCollection<Set<String>, String>(
          SchemaNoteDigitalDocument.keywords,
          resource.tags,
          UnorderedItemsSetMapper.new,
        )
        .addValue(SchemaNoteDigitalDocument.dateCreated, resource.createdAt)
        .addValue(SchemaNoteDigitalDocument.dateModified, resource.modifiedAt)
        .build();
  }
}
