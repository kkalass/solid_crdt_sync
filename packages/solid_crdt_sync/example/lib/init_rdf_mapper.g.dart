// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
//
// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_mapper/rdf_mapper.dart';

import 'package:personal_notes_app/models/category.dart' as category;
import 'package:personal_notes_app/models/category.rdf_mapper.g.dart' as crmg;
import 'package:solid_crdt_sync_core/src/mapping/pod_iri_config.dart' as pic;
import 'package:personal_notes_app/models/note.dart' as note;
import 'package:personal_notes_app/models/note.rdf_mapper.g.dart' as nrmg;
import 'package:personal_notes_app/models/note_index_entry.dart' as nie;
import 'package:personal_notes_app/models/note_index_entry.rdf_mapper.g.dart'
    as niermg;

/// Initializes and returns an RdfMapper with mappers registered.
///
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
/// * [$resourceIriFactory]
/// * [$resourceRefFactory]
RdfMapper initRdfMapper({
  RdfMapper? rdfMapper,
  required IriTermMapper<(String id,)> Function<T>(pic.PodIriConfig)
  $resourceIriFactory,
  required IriTermMapper<String> Function<T>(Type) $resourceRefFactory,
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  registry.registerMapper<category.Category>(
    crmg.CategoryMapper(
      iriMapper: $resourceIriFactory<category.Category>(
        const pic.PodIriConfig(),
      ),
    ),
  );
  registry.registerMapper<note.Note>(
    nrmg.NoteMapper(
      categoryIdMapper: $resourceRefFactory<String?>(category.Category),
      iriMapper: $resourceIriFactory<note.Note>(const pic.PodIriConfig()),
    ),
  );
  registry.registerMapper<nie.NoteIndexEntry>(
    niermg.NoteIndexEntryMapper(
      categoryIdMapper: $resourceRefFactory<String?>(category.Category),
      idMapper: $resourceRefFactory<String>(note.Note),
    ),
  );

  return rdfMapper;
}
